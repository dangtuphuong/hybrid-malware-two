import React, { useMemo, useState } from "react";
import {
  Card,
  Typography,
  Select,
  MenuItem,
  Box,
  FormControl,
} from "@mui/material"; // Keeping MUI for layout components
import {
  BarChart as RechartsBarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
} from "recharts"; // Import Recharts components
import { colors } from "@mui/material";

const mapData = (series, metricType) => {
  const result = Object.keys(series[0] || {})?.map((k) => {
    if (!["accuracy", "macro avg", "weighted avg", "overall"].includes(k)) {
      return { data: [], label: k };
    }
    return null;
  });

  series?.forEach((model) => {
    Object.values(model)?.forEach((item, i) => {
      if (result[i]?.data) {
        result[i].data.push(item[metricType] || 0);
      }
    });
  });

  return result?.filter((val) => val);
};

const getMin = (items) =>
  Math.min(...(items?.flatMap(({ data }) => data || []) || []), 0.8) * 0.95;

// eslint-disable-next-line react/prop-types
export default function MultiBarChart({ label, data, loading }) {
  const [metricType, setMetricType] = useState("accuracy");
  const labels = Object.keys(data);
  const series = Object.values(data);

  const result = useMemo(
    () => mapData(series, metricType),
    [labels?.length, metricType]
  );

  const min = useMemo(() => getMin(result), [labels?.length, metricType]);

  return (
    <Card
      variant="outlined"
      style={{ padding: "16px", backgroundColor: "white" }}
    >
      <Box>
        <Typography
          display="inline-block"
          fontWeight="600"
          variant="h6"
          gutterBottom
        >
          {label}
        </Typography>
        <FormControl sx={{ width: 200, ml: 2 }} size="small">
          <Select
            id="metric-type"
            value={metricType}
            onChange={(event) => setMetricType(event.target.value)}
            inputProps={{ "aria-label": "Without label" }}
          >
            <MenuItem value="accuracy">Accuracy</MenuItem>
            <MenuItem value="precision">Precision</MenuItem>
            <MenuItem value="recall">Recall</MenuItem>
            <MenuItem value="f1-score">F1 Score</MenuItem>
          </Select>
        </FormControl>
      </Box>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <ResponsiveContainer width="100%" height={400}>
          <RechartsBarChart
            data={result}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="label" />
            <YAxis domain={[min, "dataMax + 1"]} />
            <Tooltip />
            {result.map((item, index) => (
              <Bar
                key={index}
                dataKey={`data[${index}].data`}
                fill={colors[index % colors.length]} // Using colors from constants
              />
            ))}
          </RechartsBarChart>
        </ResponsiveContainer>
      )}
    </Card>
  );
}

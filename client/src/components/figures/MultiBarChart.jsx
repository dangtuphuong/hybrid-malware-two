import React, { useMemo, useState } from "react";
import { Card, Form, Container, Row, Col } from "react-bootstrap";
import {
  BarChart as RechartsBarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
} from "recharts"; // Import Recharts components

// Define a set of colors for the bars
const barColors = [
  "#8884d8", // Purple
  "#82ca9d", // Light Green
  "#ffc658", // Yellow
  "#ff8042", // Orange
  "#00C49F", // Teal
  "#0088FE", // Blue
];

// Function to map the data for the chart
const mapData = (series, metricType) => {
  const mappedData = [];

  // Get malware types (keys) from the first model in the series
  const malwareTypes = Object.keys(series[0] || {});

  // Iterate over each malware type and build the data for the chart
  malwareTypes.forEach((malwareType) => {
    if (
      !["accuracy", "macro avg", "weighted avg", "overall"].includes(
        malwareType
      )
    ) {
      const entry = { label: malwareType }; // This will be the malware type on the X-axis

      // Add each model's result for this malware type
      series.forEach((model, modelIndex) => {
        entry[`Model_${modelIndex}`] = model[malwareType][metricType] || 0;
      });

      mappedData.push(entry);
    }
  });

  return mappedData;
};

// Function to get the minimum value for Y-axis scaling
const getMin = (items) =>
  Math.min(
    ...(items?.flatMap((item) =>
      Object.values(item).filter((v) => typeof v === "number")
    ) || []),
    0.8
  ) * 0.95;

export default function MultiBarChart({ label, data, loading }) {
  const [metricType, setMetricType] = useState("accuracy");
  const labels = Object.keys(data);
  const series = Object.values(data);

  // Memoize the mapped data and min value for Y-axis
  const result = useMemo(
    () => mapData(series, metricType),
    [labels.length, metricType]
  );
  const min = useMemo(() => getMin(result), [result]);

  return (
    <Card className="p-3 mb-4 shadow-sm">
      <Container>
        <Row>
          <Col>
            <h6 className="font-weight-bold">{label}</h6>
          </Col>
          <Col xs="auto">
            <Form.Group controlId="metricTypeSelect">
              <Form.Label> Metric Type </Form.Label>
              <Form.Control
                as="select"
                value={metricType}
                onChange={(event) => setMetricType(event.target.value)}
              >
                <option value="accuracy">Accuracy</option>
                <option value="precision">Precision</option>
                <option value="recall">Recall</option>
                <option value="f1-score">F1 Score</option>
              </Form.Control>
            </Form.Group>
          </Col>
        </Row>
      </Container>

      {loading ? (
        <p>Loading...</p>
      ) : (
        <ResponsiveContainer width="100%" height={400}>
          <RechartsBarChart
            data={result}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="label" />
            <YAxis domain={[min, "dataMax + 1"]} />
            <Tooltip />
            {series.map((_, index) => (
              <Bar
                key={index}
                dataKey={`Model_${index}`} // Each bar is grouped by model
                fill={barColors[index % barColors.length]} // Assign different colors to each bar
              />
            ))}
          </RechartsBarChart>
        </ResponsiveContainer>
      )}
    </Card>
  );
}

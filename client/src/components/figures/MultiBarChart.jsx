import React, { useMemo, useState } from "react";
import { Card, Form, Container, Row, Col } from "react-bootstrap";
import {
  BarChart as RechartsBarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
} from "recharts"; // Import Recharts components

// Define a set of colors for the bars
const barColors = [
  "#8884d8", // Purple
  "#82ca9d", // Light Green
  "#ffc658", // Yellow
  "#ff8042", // Orange
  "#00C49F", // Teal
  "#0088FE", // Blue
];

// Function to map the data for the chart
const mapData = (data, metricType) => {
  const result = [];

  if (data && typeof data === "object" && Object.keys(data).length > 0) {
    Object.entries(data)?.forEach(([key, obj]) => {
      const item = { label: key };

      Object.entries(obj)?.forEach(([k, metrics]) => {
        item[k] = metrics[metricType];
      });

      result.push(item);
    });
  }

  return result;
};

export default function MultiBarChart({ label, data, loading }) {
  const [metricType, setMetricType] = useState("accuracy");

  const result = useMemo(
    () => mapData(data, metricType),
    [Object.keys(data).length, metricType]
  );

  return (
    <Card className="p-3 mb-4 shadow-sm">
      <Container>
        <Row>
          <Col>
            <h6 className="font-weight-bold">{label}</h6>
          </Col>
          <Col xs="auto">
            <Form.Group controlId="metricTypeSelect">
              <Form.Label> Metric Type </Form.Label>
              <Form.Control
                as="select"
                value={metricType}
                onChange={(event) => setMetricType(event.target.value)}
              >
                <option value="accuracy">Accuracy</option>
                <option value="precision">Precision</option>
                <option value="recall">Recall</option>
                <option value="f1-score">F1 Score</option>
              </Form.Control>
            </Form.Group>
          </Col>
        </Row>
      </Container>

      {loading ? (
        <p>Loading...</p>
      ) : (
        <ResponsiveContainer width="100%" height={400}>
          <RechartsBarChart
            data={result}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="label" />
            <YAxis />
            <Tooltip />
            {Object.keys(result[0] || {})?.map((key, index) => (
              <Bar
                key={`${key}-index`}
                dataKey={key} // Each bar is grouped by model
                fill={barColors[index % barColors.length]} // Assign different colors to each bar
              />
            ))}
          </RechartsBarChart>
        </ResponsiveContainer>
      )}
    </Card>
  );
}

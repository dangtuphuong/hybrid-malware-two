import React, { useMemo, useState } from "react";
import { Card, Dropdown, Button } from "react-bootstrap"; // Import Dropdown and Button
import "./Chart.css"; // Import custom CSS for styling

const mapData = (series, metricType) => {
  const result = Object.keys(series[0] || {}).map((k) => {
    if (!["accuracy", "macro avg", "weighted avg", "overall"].includes(k)) {
      return { data: [], label: k };
    }
    return null;
  });

  series.forEach((model) => {
    Object.values(model).forEach((item, i) => {
      if (result[i]?.data) {
        result[i].data.push(item[metricType] || 0);
      }
    });
  });

  return result.filter((val) => val);
};

const getMin = (items) =>
  Math.min(...(items.flatMap(({ data }) => data || []) || []), 0.8) * 0.95;

export default function MultiBarChart({ label, data, loading }) {
  const [metricType, setMetricType] = useState("accuracy");
  const labels = Object.keys(data);
  const series = Object.values(data);

  const result = useMemo(
    () => mapData(series, metricType),
    [labels.length, metricType]
  );
  const min = useMemo(() => getMin(result), [labels.length, metricType]);

  return (
    <Card className="mb-3" style={{ backgroundColor: "white" }}>
      <Card.Body>
        <div className="d-flex align-items-center mb-3">
          <h6 className="font-weight-bold">{label}</h6>
          <Dropdown className="ml-3">
            <Dropdown.Toggle variant="success" id="metric-type-dropdown">
              {metricType.charAt(0).toUpperCase() + metricType.slice(1)}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setMetricType("accuracy")}>
                Accuracy
              </Dropdown.Item>
              <Dropdown.Item onClick={() => setMetricType("precision")}>
                Precision
              </Dropdown.Item>
              <Dropdown.Item onClick={() => setMetricType("recall")}>
                Recall
              </Dropdown.Item>
              <Dropdown.Item onClick={() => setMetricType("f1-score")}>
                F1 Score
              </Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        </div>
        {loading ? (
          <p>Loading...</p>
        ) : (
          <div className="chart-container">
            {result.map((item, index) => (
              <div key={index} className="bar-container">
                <div
                  className="bar"
                  style={{
                    height: `${
                      (item.data.reduce((a, b) => a + b, 0) / (min || 1)) * 100
                    }%`, // Use min value for scaling
                    backgroundColor: "#007bff", // Bootstrap primary color
                  }}
                />
                <div className="label">{item.label}</div>
              </div>
            ))}
          </div>
        )}
      </Card.Body>
    </Card>
  );
}

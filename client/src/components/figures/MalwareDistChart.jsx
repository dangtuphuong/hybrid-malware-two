import React from "react";
import { Card } from "react-bootstrap";
import { PieChart, Pie, Cell, Tooltip, Legend } from "recharts"; // Import Recharts components
import "./MalwareDistChart.css"; // Import custom CSS for styling

// Generate an array of colors
const generateColors = (numColors) => {
  const colors = [];
  for (let i = 0; i < numColors; i++) {
    // Generate a color using HSL
    colors.push(`hsl(${(i * 360) / numColors}, 70%, 50%)`);
  }
  return colors;
};

// eslint-disable-next-line react/prop-types
export default function MalwareDistChart({ data, loading }) {
  const TOTAL = data?.map((item) => item.value).reduce((a, b) => a + b, 0) || 0;

  // Calculate the percentage for each data item
  const dataWithPercentages = data.map((item) => ({
    ...item,
    percentage: ((item.value / TOTAL) * 100).toFixed(0),
  }));

  // Generate colors based on the number of malware types
  const colors = generateColors(dataWithPercentages.length);

  return (
    <Card
      className="mb-3"
      style={{
        backgroundColor: "white",
        border: "none",
        borderRadius: "0.5rem",
        boxShadow: "0 1px 3px rgba(0, 0, 0, 0.1)",
        width: "100%",
        maxWidth: "600px", // Increased max width for better fit
        overflow: "visible", // Allow content to overflow
      }}
    >
      <Card.Body>
        <Card.Title className="font-weight-bold">
          Malware Distribution
        </Card.Title>
        {loading ? (
          <p>Loading...</p>
        ) : (
          <div
            className="pie-chart-container"
            style={{
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              width: "100%",
            }}
          >
            <PieChart width={300} height={300}>
              <Pie
                data={dataWithPercentages}
                dataKey="value"
                nameKey="label"
                cx="50%"
                cy="50%"
                outerRadius={80}
                innerRadius={30} // Add inner radius for a donut chart effect
                label={false} // Disable default labels
                stroke="none" // Remove border around pie slices
              >
                {dataWithPercentages.map((entry, index) => (
                  <Cell key={index} fill={colors[index]} /> // Assign generated color
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
            <div
              className="pie-slice-labels"
              style={{ marginLeft: "20px", textAlign: "left" }}
            >
              {dataWithPercentages.map((item, index) => (
                <div
                  key={index}
                  className="slice-label"
                  style={{
                    color: colors[index],
                    fontWeight: "bold",
                    margin: "5px 0",
                  }} // Use generated color for labels
                >
                  {item.label}: {item.percentage}%
                </div>
              ))}
            </div>
          </div>
        )}
      </Card.Body>
    </Card>
  );
}

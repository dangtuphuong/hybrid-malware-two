import React from "react";
import { Card } from "react-bootstrap";
import {
  BarChart,
  Bar,
  Cell,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  Legend,
  ResponsiveContainer,
} from "recharts"; // Import Recharts components for BarChart
import "./MalwareDistChart.css"; // Import custom CSS for styling

// Generate an array of colors
const generateColors = (numColors) => {
  const colors = [];
  for (let i = 0; i < numColors; i++) {
    // Generate a color using HSL
    colors.push(`hsl(${(i * 360) / numColors}, 70%, 50%)`);
  }
  return colors;
};

// Custom tooltip component
const CustomTooltip = ({ active, payload }) => {
  if (active && payload && payload.length) {
    return (
      <div
        style={{
          backgroundColor: "#333",
          padding: "10px",
          borderRadius: "5px",
          color: "white",
        }}
      >
        <p>{`Name: ${payload[0].payload.label}`}</p> {/* Show the item name */}
        <p>{`Value: ${payload[0].value}`}</p> {/* Show the value */}
        <p>{`Percentage: ${payload[0].payload.percentage}%`}</p>{" "}
        {/* Show the percentage */}
      </div>
    );
  }

  return null;
};

// eslint-disable-next-line react/prop-types
export default function MalwareDistChart({ data, loading }) {
  const TOTAL = data?.map((item) => item.value).reduce((a, b) => a + b, 0) || 0;

  // Calculate the percentage for each data item
  const dataWithPercentages = data.map((item) => ({
    ...item,
    percentage: ((item.value / TOTAL) * 100).toFixed(0),
  }));

  // Generate colors based on the number of malware types
  const colors = generateColors(dataWithPercentages.length);

  return (
    <Card
      className="mb-3"
      style={{
        padding: "20px",
        backgroundColor: "#333", // Set the card background to a consistent dark color
        border: "none",
        borderRadius: "0.5rem",
        boxShadow: "0 1px 3px rgba(0, 0, 0, 0.5)", // Darker shadow for card
        overflow: "hidden", // Prevent overflow of content
      }}
    >
      <Card.Body>
        <Card.Title
          className="font-weight-bold"
          style={{ marginBottom: "20px", color: "white" }} // Title color set to white
        >
          Malware Distribution
        </Card.Title>
        {loading ? (
          <p style={{ color: "white" }}>Loading...</p> // Loading text in white
        ) : (
          <div
            className="bar-chart-container"
            style={{
              width: "100%",
              display: "flex", // Use flex to align items vertically
              flexDirection: "column",
            }}
          >
            <ResponsiveContainer width="100%" height={300}>
              <BarChart
                data={dataWithPercentages}
                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="label" stroke="white" /> // X-axis labels
                <YAxis stroke="white" /> // Y-axis
                <Tooltip content={<CustomTooltip />} />{" "}
                {/* Use custom tooltip */}
                <Legend />
                <Bar dataKey="value" fill="#8884d8">
                  {dataWithPercentages.map((entry, index) => (
                    <Cell key={index} fill={colors[index]} /> // Assign generated color to each bar
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>

            <div
              className="bar-slice-labels"
              style={{
                marginTop: "10px", // Space between the chart and labels
                display: "flex", // Use flexbox for horizontal display
                flexWrap: "wrap", // Allow labels to wrap to the next line if needed
                justifyContent: "space-between", // Space items evenly
                color: "white", // Set text color to white for labels
                overflow: "hidden", // Prevent labels from overflowing
                maxHeight: "50px", // Set a max height for labels area
              }}
            >
              {dataWithPercentages.map((item, index) => (
                <div
                  key={index}
                  className="slice-label"
                  style={{
                    color: colors[index], // Use generated color for labels
                    fontWeight: "bold", // Bold labels
                    margin: "0 5px", // Space between labels
                    whiteSpace: "nowrap", // Prevent label text from wrapping
                  }}
                >
                  {item.label}: {item.percentage}%{" "}
                  {/* Show percentage in labels */}
                </div>
              ))}
            </div>
          </div>
        )}
      </Card.Body>
    </Card>
  );
}

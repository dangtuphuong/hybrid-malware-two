import { useState, useEffect, useMemo } from "react";
import {
  Box,
  Button,
  Container,
  Typography,
  Paper,
  LinearProgress,
  Autocomplete,
  TextField,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Snackbar,
} from "@mui/material";
import { CloudArrowUpFill, X } from "react-bootstrap-icons";
import DataService from "../services/data-service";
import Layout from "../components/Layout";

const PredictPage = () => {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [options, setOptions] = useState([]);
  const [file, setFile] = useState(null);
  const [modelID, setModelID] = useState(null);
  const [keyCol, setKeyCol] = useState("");
  const [result, setResult] = useState(null);
  const [mess, setMess] = useState("");

  useEffect(() => {
    DataService.getModels()
      .then((res) => {
        setOptions(res?.data?.items || []);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  const canSubmit = !!file;

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!canSubmit) {
      setOpen(true);
      setMess("Please fill out all required fields.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("model_id", modelID);
    formData.append("key_column", keyCol);

    setLoading(true);
    DataService.predictByModel(formData)
      .then((res) => {
        console.log("Success:", res);
        setResult(res?.data);
        setOpen(true);
        setMess("Get Prediction Successfully!");
      })
      .catch((error) => {
        console.error("Error:", error);
        setOpen(true);
        setMess(error?.response?.data?.error || "Failed to upload data.");
      })
      .finally(() => setLoading(false));
  };

  const handleCancel = () => {
    setMess("");
    setFile(null);
    setKeyCol("");
    setModelID(null);
    setResult(null);
    setOpen(true);
    setMess("Reset Done!");
  };

  const action = useMemo(
    () => (
      <IconButton
        size="small"
        aria-label="close"
        color="inherit"
        onClick={() => setOpen(false)}
      >
        <X size="20" />
      </IconButton>
    ),
    []
  );

  return (
    <Layout>
      <Typography variant="h5" sx={{ fontWeight: 600 }}>
        Upload Data to Generate Predictions
      </Typography>
      <Container maxWidth="md">
        <Box sx={{ p: "30px 60px", bgcolor: "white", borderRadius: 2 }}>
          <form onSubmit={handleSubmit}>
            <Box
              sx={{ display: "flex", justifyContent: "space-between", mb: 3 }}
            >
              <Autocomplete
                value={modelID}
                options={options}
                groupBy={(option) => option.report}
                sx={{ flex: 1 }}
                renderInput={(params) => (
                  <TextField {...params} label="Model ID" />
                )}
                onChange={(event, newValue) => setModelID(newValue?.value)}
              />
              <TextField
                disabled={loading}
                label="Title Column"
                value={keyCol}
                onChange={(e) => setKeyCol(e.target.value)}
                sx={{ flex: 0.3, marginLeft: 1 }}
              />
            </Box>
            <Paper
              variant="outlined"
              sx={{
                padding: 2,
                textAlign: "center",
                mb: 3,
                borderStyle: "dashed",
              }}
            >
              <CloudArrowUpFill size="40" color="lightgray" />
              {file ? (
                <Typography variant="body1" sx={{ mt: 2 }}>
                  Selected file: {file.name}
                </Typography>
              ) : (
                <>
                  <Typography variant="body1" gutterBottom>
                    Select a file or drag and drop here
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    CSV file
                  </Typography>
                </>
              )}
              <Button
                variant="outlined"
                component="label"
                disabled={loading}
                sx={{ mt: 2, textTransform: "none" }}
              >
                Select File
                <input
                  type="file"
                  hidden
                  onChange={handleFileChange}
                  required
                  disabled={loading}
                />
              </Button>
            </Paper>

            {loading && (
              <Box sx={{ width: "100%" }}>
                <LinearProgress />
              </Box>
            )}

            <Box
              sx={{
                display: "flex",
                justifyContent: "flex-end",
                gap: 1,
                mt: 5,
              }}
            >
              <Button variant="outlined" color="neutral" onClick={handleCancel}>
                Reset
              </Button>
              <Button
                variant="contained"
                color="primary"
                type="submit"
                disabled={loading || !canSubmit}
              >
                Predict
              </Button>
            </Box>
          </form>
        </Box>
        <Snackbar
          autoHideDuration={3000}
          anchorOrigin={{ vertical: "top", horizontal: "right" }}
          open={open}
          onClose={() => setOpen(false)}
          message={mess}
          action={action}
        />
        {!!result && (
          <Box sx={{ mt: 4, borderRadius: 2 }}>
            <Typography fontWeight="600" variant="h6" sx={{ mb: 2 }}>
              {`Result from ${result?.model_label} Model`}
            </Typography>
            <TableContainer component={Paper}>
              <Table sx={{ minWidth: 650 }} aria-label="simple table">
                <TableHead>
                  <TableRow>
                    <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>
                    <TableCell sx={{ fontWeight: 600 }}>Prediction</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {Object.entries(result?.predictions)?.map(([key, value]) => (
                    <TableRow
                      key={key}
                      sx={{
                        "&:last-child td, &:last-child th": { border: 0 },
                      }}
                    >
                      <TableCell>{key}</TableCell>
                      <TableCell>{value}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        )}
      </Container>
    </Layout>
  );
};

export default PredictPage;

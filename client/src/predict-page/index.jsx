import { useState, useEffect, useMemo } from "react";
import {
  Box,
  Button,
  Container,
  Typography,
  Paper,
  LinearProgress,
  Autocomplete,
  TextField,
  IconButton,
  Snackbar,
  createTheme,
  ThemeProvider,
} from "@mui/material";
import { CloudArrowUpFill, X } from "react-bootstrap-icons";
import DataService from "../services/data-service";
import Layout from "../components/Layout";
import PredictionChart from "./PredictionChart"; // Import the new component

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: "dark",
    background: {
      default: "#121212",
      paper: "#1e1e1e",
    },
    text: {
      primary: "#fff",
      secondary: "#b0bec5",
    },
  },
});

const PredictPage = () => {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [options, setOptions] = useState([]);
  const [file, setFile] = useState(null);
  const [modelID, setModelID] = useState(null);
  const [keyCol, setKeyCol] = useState("");
  const [result, setResult] = useState(null);
  const [mess, setMess] = useState("");
  const [chartData, setChartData] = useState([]);

  useEffect(() => {
    DataService.getModels()
      .then((res) => {
        setOptions(res?.data?.items || []);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  const canSubmit = !!file;

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!canSubmit) {
      setOpen(true);
      setMess("Please fill out all required fields.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("model_id", modelID);
    formData.append("key_column", keyCol);

    setLoading(true);
    DataService.predictByModel(formData)
      .then((res) => {
        console.log("Success:", res);
        setResult(res?.data); // Keep the result for display below
        setOpen(true);
        setMess("Get Prediction Successfully!");

        // Group predictions and prepare chart data
        const groupedPredictions = groupPredictions(res?.data?.predictions);
        setChartData(prepareChartData(groupedPredictions));
      })
      .catch((error) => {
        console.error("Error:", error);
        setOpen(true);
        setMess(error?.response?.data?.error || "Failed to upload data.");
      })
      .finally(() => setLoading(false));
  };

  const handleCancel = () => {
    setMess("");
    setFile(null);
    setKeyCol("");
    setModelID(null);
    setResult(null);
    setChartData([]);
    setOpen(true);
    setMess("Reset Done!");
  };

  const action = useMemo(
    () => (
      <IconButton
        size="small"
        aria-label="close"
        color="inherit"
        onClick={() => setOpen(false)}
      >
        <X size="20" />
      </IconButton>
    ),
    []
  );

  const selectedModel = useMemo(
    () => options?.find((o) => o?.id === modelID) || {},
    [options?.length, modelID]
  );

  const groupPredictions = (predictions) => {
    return Object.entries(predictions).reduce((acc, [key, value]) => {
      acc[value] = (acc[value] || 0) + 1;
      return acc;
    }, {});
  };

  const prepareChartData = (groupedPredictions) => {
    return Object.entries(groupedPredictions).map(([key, count]) => ({
      name: key,
      count: count,
    }));
  };

  return (
    <ThemeProvider theme={darkTheme}>
      <Layout>
        <Container maxWidth="md">
          <Box
            sx={{
              p: "30px 60px",
              bgcolor: "background.paper",
              borderRadius: 2,
            }}
          >
            <form onSubmit={handleSubmit}>
              <Box
                sx={{ display: "flex", justifyContent: "space-between", mb: 3 }}
              >
                <Autocomplete
                  value={modelID}
                  options={options}
                  groupBy={(option) => option.report}
                  sx={{ flex: 1 }}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Model ID"
                      sx={{ input: { fontFamily: "Courier New" } }}
                    />
                  )}
                  onChange={(event, newValue) => setModelID(newValue?.value)}
                />
                <TextField
                  disabled={loading}
                  label="Title Column"
                  value={keyCol}
                  onChange={(e) => setKeyCol(e.target.value)}
                  sx={{
                    flex: 0.3,
                    marginLeft: 1,
                    input: { fontFamily: "Courier New" },
                  }}
                />
              </Box>

              {!!selectedModel?.feature_columns && (
                <TextField
                  fullWidth
                  disabled
                  label="Feature Columns"
                  value={selectedModel?.feature_columns}
                  multiline
                  rows={4}
                  sx={{ mb: 3, input: { fontFamily: "Courier New" } }}
                />
              )}

              <Paper
                variant="outlined"
                sx={{
                  padding: 2,
                  textAlign: "center",
                  mb: 3,
                  borderStyle: "dashed",
                  bgcolor: "background.paper",
                }}
              >
                <CloudArrowUpFill size="40" color="lightgray" />
                {file ? (
                  <Typography variant="body1" sx={{ mt: 2 }}>
                    Selected file: {file.name}
                  </Typography>
                ) : (
                  <>
                    <Typography variant="body1" gutterBottom>
                      Select a file or drag and drop here
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      CSV file
                    </Typography>
                  </>
                )}
                <Button
                  variant="outlined"
                  component="label"
                  disabled={loading}
                  sx={{ mt: 2, textTransform: "none" }}
                >
                  Select File
                  <input
                    type="file"
                    hidden
                    onChange={handleFileChange}
                    required
                    disabled={loading}
                  />
                </Button>
              </Paper>

              {loading && <LinearProgress />}

              <Button
                type="submit"
                fullWidth
                variant="contained"
                color="primary"
                disabled={loading || !file}
                sx={{ mt: 2 }}
              >
                Predict
              </Button>
            </form>

            <Button
              fullWidth
              variant="outlined"
              color="secondary"
              sx={{ mt: 2 }}
              onClick={handleCancel}
            >
              Cancel
            </Button>
          </Box>
        </Container>

        {/* Render the chart only when there is chartData */}
        <PredictionChart chartData={chartData} />

        {/* Displaying the result from the model below the chart */}
        {result && (
          <Box
            sx={{ mt: 4, p: 2, bgcolor: "background.default", borderRadius: 2 }}
          >
            <Typography variant="h6">Prediction Details</Typography>
            <pre>{JSON.stringify(result, null, 2)}</pre>
          </Box>
        )}
      </Layout>
    </ThemeProvider>
  );
};

export default PredictPage;

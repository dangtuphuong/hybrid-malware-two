import React, { useState } from "react";
import { PieChart, Pie, Cell, Tooltip } from "recharts";
import {
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Button,
  Tooltip as MuiTooltip,
  TextField,
  Snackbar,
} from "@mui/material";
import { SaveAlt as SaveIcon } from "@mui/icons-material";

const COLORS = [
  "#0088FE",
  "#00C49F",
  "#FFBB28",
  "#FF8042",
  "#FF637F",
  "#FF94D4",
];

// Dummy function for email alert or download feature
const sendEmailAlert = (message) => alert(message);
const downloadCSV = (data) => {
  const csvContent =
    "data:text/csv;charset=utf-8," +
    data.map((e) => `${e.name},${e.count}`).join("\n");
  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "malware_prediction.csv");
  document.body.appendChild(link);
  link.click();
};

const PredictionChart = ({ chartData }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [alertOpen, setAlertOpen] = useState(false);
  const threshold = 2000;

  if (!chartData || chartData.length === 0) {
    return null; // No data to show
  }

  // Filter table data based on search term
  const filteredData = chartData.filter((data) =>
    data.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Function to handle Investigation and search on Google
  const handleInvestigate = (malwareName) => {
    const googleSearchUrl = `https://www.google.com/search?q=${encodeURIComponent(
      malwareName
    )}`;
    window.open(googleSearchUrl, "_blank");
  };

  return (
    <Box
      sx={{
        mt: 4,
        p: 2,
        bgcolor: "background.default",
        borderRadius: 2,
        display: "flex",
        flexDirection: "column",
        alignItems: "center", // Center content horizontally
        fontFamily: "'Courier New', Courier, monospace", // Set font to Courier New
      }}
    >
      <Typography
        variant="h6"
        gutterBottom
        align="center"
        sx={{ fontFamily: "'Courier New', Courier, monospace" }}
      >
        Prediction Results
      </Typography>

      {/* Pie Chart */}
      <PieChart width={400} height={400}>
        <Pie
          data={chartData}
          dataKey="count"
          nameKey="name"
          outerRadius={150}
          fill="#8884d8"
          label
        >
          {chartData.map((entry, index) => (
            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
          ))}
        </Pie>
        <Tooltip />
      </PieChart>

      {/* Search */}
      <TextField
        label="Search Malware"
        variant="outlined"
        sx={{ mt: 2, mb: 2, width: "80%" }} // Center and make it responsive
        onChange={(e) => setSearchTerm(e.target.value)}
      />

      {/* Table of Results */}
      <TableContainer component={Paper} sx={{ mt: 2, width: "80%" }}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell
                sx={{ fontFamily: "'Courier New', Courier, monospace" }}
              >
                Name
              </TableCell>
              <TableCell
                sx={{ fontFamily: "'Courier New', Courier, monospace" }}
              >
                Count
              </TableCell>
              <TableCell
                sx={{ fontFamily: "'Courier New', Courier, monospace" }}
              >
                Action
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredData.map((data, index) => (
              <TableRow
                key={index}
                sx={{
                  bgcolor: data.count > threshold ? "#ffcccc" : undefined, // Highlight above threshold
                }}
              >
                <TableCell
                  sx={{ fontFamily: "'Courier New', Courier, monospace" }}
                >
                  {data.name}
                </TableCell>
                <TableCell>
                  <MuiTooltip title={`${(data.count / 10000) * 100}%`}>
                    <Typography
                      sx={{ fontFamily: "'Courier New', Courier, monospace" }}
                    >
                      {data.count}
                    </Typography>
                  </MuiTooltip>
                </TableCell>
                <TableCell>
                  <Button
                    variant="contained"
                    color="secondary"
                    onClick={() => handleInvestigate(data.name)}
                  >
                    Investigate
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Export CSV Button */}
      <Button
        variant="contained"
        color="primary"
        startIcon={<SaveIcon />}
        sx={{ mt: 2 }}
        onClick={() => downloadCSV(chartData)}
      >
        Download CSV
      </Button>

      {/* Alert Notification */}
      <Snackbar
        open={alertOpen}
        autoHideDuration={6000}
        message="Malware count exceeds threshold!"
        onClose={() => setAlertOpen(false)}
      />
    </Box>
  );
};

export default PredictionChart;

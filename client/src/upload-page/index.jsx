import { useState, useMemo } from "react";
import {
  Box,
  Button,
  Container,
  TextField,
  Typography,
  Paper,
  Snackbar,
  ToggleButton,
  ToggleButtonGroup,
  LinearProgress,
  IconButton,
} from "@mui/material";
import { CloudArrowUpFill, X } from "react-bootstrap-icons";
import { useNavigate } from "react-router-dom";
import DataService from "../services/data-service";
import AuthService from "../services/auth-service";
import Layout from "../components/Layout";

const defaultModels = ["knn", "lgbm", "hybrid"];

const UploadPage = () => {
  const navigate = useNavigate();
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [file, setFile] = useState(null);
  const [sep, setSep] = useState(",");
  const [featureCols, setFeatureCols] = useState("");
  const [targetCol, setTargetCols] = useState("");
  const [name, setName] = useState("");
  const [models, setModels] = useState(defaultModels);
  const [mess, setMess] = useState("");

  const user = useMemo(() => AuthService.getCurrentUser(), []);

  const canSubmit =
    !!name &&
    !!file &&
    !!sep &&
    !!featureCols &&
    !!targetCol &&
    !!models?.length;

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleToggleTag = (event, newTags) => {
    setModels(newTags);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!canSubmit) {
      setMess("Please fill out all required fields.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("name", name);
    formData.append("separator", sep);
    formData.append("features", featureCols);
    formData.append("target", targetCol);
    formData.append("train_models_str", models?.join(","));
    formData.append("created_by", user?.name || "");

    setLoading(true);
    DataService.trainModels(formData)
      .then((res) => {
        console.log("Success:", res);
        navigate(`/report/${res?.data?.report_id}`);
      })
      .catch((error) => {
        console.error("Error:", error);
        setMess("Failed to upload data.");
        setOpen(true);
      })
      .finally(() => setLoading(false));
  };

  const handleCancel = () => {
    setMess("");
    setName("");
    setFile(null);
    setModels(defaultModels);
    setSep(",");
    setFeatureCols("");
    setTargetCols("");
    setMess("Form Reset!");
    setOpen(true);
  };

  const action = useMemo(
    () => (
      <IconButton
        size="small"
        aria-label="close"
        color="inherit"
        onClick={() => setOpen(false)}
      >
        <X size="20" />
      </IconButton>
    ),
    []
  );

  return (
    <Layout>
      <Typography variant="h5" sx={{ mb: 4, fontWeight: 600 }}>
        Upload Dataset to Train Models
      </Typography>
      <Container maxWidth="md">
        <Box sx={{ p: "30px 60px", bgcolor: "white", borderRadius: 2 }}>
          <form onSubmit={handleSubmit}>
            <TextField
              required
              fullWidth
              disabled={loading}
              label="Name"
              placeholder="Enter a name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              sx={{ mb: 3 }}
            />

            <Paper
              variant="outlined"
              sx={{
                padding: 2,
                textAlign: "center",
                mb: 3,
                borderStyle: "dashed",
              }}
            >
              <CloudArrowUpFill size="40" color="lightgray" />
              {file ? (
                <Typography variant="body1" sx={{ mt: 2 }}>
                  Selected file: {file.name}
                </Typography>
              ) : (
                <>
                  <Typography variant="body1" gutterBottom>
                    Select a file or drag and drop here
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    CSV file
                  </Typography>
                </>
              )}
              <Button
                variant="outlined"
                component="label"
                disabled={loading}
                sx={{ mt: 2, textTransform: "none" }}
              >
                Select File
                <input
                  type="file"
                  hidden
                  onChange={handleFileChange}
                  required
                  disabled={loading}
                />
              </Button>
            </Paper>

            <Box
              sx={{ display: "flex", justifyContent: "space-between", mb: 3 }}
            >
              <TextField
                required
                disabled={loading}
                label="Separator"
                value={sep}
                onChange={(e) => setSep(e.target.value)}
                sx={{ flex: 0.5, marginRight: 1 }}
              />
              <TextField
                required
                disabled={loading}
                label="Target Column"
                value={targetCol}
                onChange={(e) => setTargetCols(e.target.value)}
                sx={{ flex: 1, marginLeft: 1 }}
              />
            </Box>

            <TextField
              required
              fullWidth
              disabled={loading}
              label="Feature Columns"
              placeholder="Enter feature columns"
              value={featureCols}
              onChange={(e) => setFeatureCols(e.target.value)}
              multiline
              rows={4}
              sx={{ mb: 3 }}
            />

            <ToggleButtonGroup
              color={loading ? "neutral" : "primary"}
              value={models}
              disabled={loading}
              onChange={handleToggleTag}
              sx={{
                mb: 3,
                display: "flex",
                justifyContent: "center",
                flexWrap: "wrap",
              }}
            >
              <ToggleButton
                sx={{ width: "150px", textTransform: "none" }}
                value="knn"
              >
                KNN
              </ToggleButton>
              <ToggleButton
                sx={{ width: "150px", textTransform: "none" }}
                value="lgbm"
              >
                LGBM
              </ToggleButton>
              <ToggleButton
                sx={{ width: "150px", textTransform: "none" }}
                value="hybrid"
              >
                Hybrid
              </ToggleButton>
            </ToggleButtonGroup>

            {loading && (
              <Box sx={{ width: "100%" }}>
                <LinearProgress />
              </Box>
            )}

            <Box
              sx={{
                display: "flex",
                justifyContent: "flex-end",
                gap: 1,
                mt: 5,
              }}
            >
              <Button variant="outlined" color="neutral" onClick={handleCancel}>
                Reset
              </Button>
              <Button
                variant="contained"
                color="primary"
                type="submit"
                disabled={loading || !canSubmit}
              >
                Upload
              </Button>
            </Box>
          </form>
          <Snackbar
            autoHideDuration={3000}
            anchorOrigin={{ vertical: "top", horizontal: "right" }}
            open={open}
            onClose={() => setOpen(false)}
            message={mess}
            action={action}
          />
        </Box>
      </Container>
    </Layout>
  );
};

export default UploadPage;

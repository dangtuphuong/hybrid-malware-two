/* eslint-disable react-hooks/exhaustive-deps */
import { useState, useEffect, useMemo } from "react";
import {
  Box,
  Button,
  Typography,
  Paper,
  LinearProgress,
  Autocomplete,
  TextField,
  Snackbar,
  IconButton,
} from "@mui/material";
import { CloudArrowUpFill, X } from "react-bootstrap-icons";
import { useNavigate } from "react-router-dom";
import DataService from "../services/data-service";
import AuthService from "../services/auth-service";

const ChainUploadForm = () => {
  const navigate = useNavigate();
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [options, setOptions] = useState([]);
  const [file, setFile] = useState(null);
  const [modelID, setModelID] = useState(null);
  const [reportName, setReportName] = useState("");
  const [chainName, setChainName] = useState("");
  const [mess, setMess] = useState("");
  const user = useMemo(() => AuthService.getCurrentUser(), []);

  useEffect(() => {
    DataService.getChainModels()
      .then((res) => {
        setOptions(res?.data?.items || []);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  const selectedModel = useMemo(
    () => options?.find((o) => o?.id === modelID) || {},
    [options?.length, modelID]
  );

  useEffect(() => {
    setChainName(selectedModel?.chain_name || "");
  }, [selectedModel?.chain_name]);

  const canSubmit = !!file && !!modelID;

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!canSubmit) {
      setOpen(true);
      setMess("Please fill out all required fields.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("model_id", modelID);
    formData.append("report_name", reportName);
    formData.append("created_by", user?.name || "");
    if (chainName) formData.append("chain_name", chainName);
    formData.append("chain_id", selectedModel?.chain_id);
    formData.append("prev_created_at", selectedModel?.created_at);

    setLoading(true);
    DataService.trainChainModel(formData)
      .then((res) => {
        console.log("Success:", res);
        navigate(`/report/${res?.data?.report_id}`);
      })
      .catch((error) => {
        console.error("Error:", error);
        setOpen(true);
        setMess(error?.response?.data?.error || "Failed to upload data.");
      })
      .finally(() => setLoading(false));
  };

  const handleCancel = () => {
    setMess("");
    setFile(null);
    setChainName("");
    setReportName("");
    setModelID(null);
    setOpen(true);
    setMess("Reset Done!");
  };

  const action = useMemo(
    () => (
      <IconButton
        size="small"
        aria-label="close"
        color="inherit"
        onClick={() => setOpen(false)}
      >
        <X size="20" />
      </IconButton>
    ),
    []
  );

  return (
    <Box sx={{ p: "30px 60px", bgcolor: "white", borderRadius: 2 }}>
      <form onSubmit={handleSubmit}>
        <TextField
          required
          fullWidth
          disabled={loading}
          label="Name"
          placeholder="Enter a name"
          value={reportName}
          onChange={(e) => setReportName(e.target.value)}
          sx={{ mb: 3 }}
        />

        <Box sx={{ display: "flex", justifyContent: "space-between", mb: 3 }}>
          <TextField
            required
            disabled={loading || selectedModel?.chain_id}
            label="Chain Name"
            value={chainName}
            onChange={(e) => setChainName(e.target.value)}
            sx={{ flex: 0.4 }}
          />
          <Autocomplete
            required
            value={modelID}
            options={options}
            groupBy={(option) => option.report}
            sx={{ flex: 0.6, marginLeft: 1 }}
            renderInput={(params) => <TextField {...params} label="Model ID" />}
            onChange={(event, newValue) => setModelID(newValue?.value)}
          />
        </Box>

        {!!selectedModel?.target_column && (
          <TextField
            fullWidth
            disabled
            label="Target Column"
            value={selectedModel?.target_column}
            sx={{ mb: 3 }}
          />
        )}

        {!!selectedModel?.feature_columns && (
          <TextField
            fullWidth
            disabled
            label="Feature Columns"
            value={selectedModel?.feature_columns}
            multiline
            rows={4}
            sx={{ mb: 3 }}
          />
        )}

        <Paper
          variant="outlined"
          sx={{
            padding: 2,
            textAlign: "center",
            mb: 3,
            borderStyle: "dashed",
          }}
        >
          <CloudArrowUpFill size="40" color="lightgray" />
          {file ? (
            <Typography variant="body1" sx={{ mt: 2 }}>
              Selected file: {file.name}
            </Typography>
          ) : (
            <>
              <Typography variant="body1" gutterBottom>
                Select a file or drag and drop here
              </Typography>
              <Typography variant="body2" color="textSecondary">
                CSV file
              </Typography>
            </>
          )}
          <Button
            variant="outlined"
            component="label"
            disabled={loading}
            sx={{ mt: 2, textTransform: "none" }}
          >
            Select File
            <input
              type="file"
              hidden
              onChange={handleFileChange}
              required
              disabled={loading}
            />
          </Button>
        </Paper>

        {loading && (
          <Box sx={{ width: "100%" }}>
            <LinearProgress />
          </Box>
        )}

        <Box
          sx={{
            display: "flex",
            justifyContent: "flex-end",
            gap: 1,
            mt: 5,
          }}
        >
          <Button variant="outlined" color="neutral" onClick={handleCancel}>
            Reset
          </Button>
          <Button
            variant="contained"
            color="primary"
            type="submit"
            disabled={loading || !canSubmit}
          >
            Train
          </Button>
        </Box>
      </form>
      <Snackbar
        autoHideDuration={3000}
        anchorOrigin={{ vertical: "top", horizontal: "right" }}
        open={open}
        onClose={() => setOpen(false)}
        message={mess}
        action={action}
      />
    </Box>
  );
};

export default ChainUploadForm;

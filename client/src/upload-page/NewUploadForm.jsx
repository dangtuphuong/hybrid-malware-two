import { useState, useMemo } from "react";
import {
  Container,
  Form,
  Button,
  Toast,
  Row,
  Col,
  ProgressBar,
} from "react-bootstrap";
import { CloudUpload, X } from "react-bootstrap-icons";
import { useNavigate } from "react-router-dom";
import DataService from "../services/data-service";
import AuthService from "../services/auth-service";

// Default models for the form
const defaultModels = ["knn", "lgbm", "hybrid"];

const NewUploadForm = () => {
  const navigate = useNavigate();
  const [showToast, setShowToast] = useState(false);
  const [loading, setLoading] = useState(false);
  const [file, setFile] = useState(null);
  const [sep, setSep] = useState(",");
  const [featureCols, setFeatureCols] = useState("");
  const [targetCol, setTargetCols] = useState("");
  const [name, setName] = useState("");
  const [models, setModels] = useState(defaultModels);
  const [mess, setMess] = useState("");

  const user = useMemo(() => AuthService.getCurrentUser(), []);

  const canSubmit =
    !!name &&
    !!file &&
    !!sep &&
    !!featureCols &&
    !!targetCol &&
    !!models?.length;

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleToggleTag = (value) => {
    setModels((prev) =>
      prev.includes(value) ? prev.filter((m) => m !== value) : [...prev, value]
    );
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!canSubmit) {
      setMess("Please fill out all required fields.");
      setShowToast(true);
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("name", name);
    formData.append("separator", sep);
    formData.append("features", featureCols);
    formData.append("target", targetCol);
    formData.append("train_models_str", models?.join(","));
    formData.append("created_by", user?.name || "");

    setLoading(true);
    DataService.trainModels(formData)
      .then((res) => {
        console.log("Success:", res);
        navigate(`/report/${res?.data?.report_id}`);
      })
      .catch((error) => {
        console.error("Error:", error);
        setMess("Failed to upload data.");
        setShowToast(true);
      })
      .finally(() => setLoading(false));
  };

  const handleCancel = () => {
    setMess("");
    setName("");
    setFile(null);
    setModels(defaultModels);
    setSep(",");
    setFeatureCols("");
    setTargetCols("");
    setMess("Form Reset!");
    setShowToast(true);
  };

  return (
    <Container
      className="p-4"
      style={{
        backgroundColor: "#212529", // Darker background color
        borderRadius: "0.5rem",
        color: "white",
      }}
    >
      <Form onSubmit={handleSubmit}>
        <Form.Group controlId="formName">
          <Form.Label>Name</Form.Label>
          <Form.Control
            required
            type="text"
            placeholder="Enter a name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            disabled={loading}
          />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formFile">
          <Form.Label>Select a file</Form.Label>
          <div className="d-flex align-items-center">
            <Form.Control
              type="file"
              onChange={handleFileChange}
              required
              disabled={loading}
              className="me-2"
            />
            {file && <span>Selected file: {file.name}</span>}
          </div>
          <Form.Text className="text-muted">CSV file</Form.Text>
        </Form.Group>

        <Row className="mb-3">
          <Col>
            <Form.Group controlId="formSeparator">
              <Form.Label>Separator</Form.Label>
              <Form.Control
                required
                type="text"
                value={sep}
                onChange={(e) => setSep(e.target.value)}
                disabled={loading}
              />
            </Form.Group>
          </Col>
          <Col>
            <Form.Group controlId="formTargetColumn">
              <Form.Label>Target Column</Form.Label>
              <Form.Control
                required
                type="text"
                value={targetCol}
                onChange={(e) => setTargetCols(e.target.value)}
                disabled={loading}
              />
            </Form.Group>
          </Col>
        </Row>

        <Form.Group className="mb-3" controlId="formFeatureColumns">
          <Form.Label>Feature Columns</Form.Label>
          <Form.Control
            required
            as="textarea"
            rows={4}
            placeholder="Enter feature columns"
            value={featureCols}
            onChange={(e) => setFeatureCols(e.target.value)}
            disabled={loading}
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Models</Form.Label>
          {defaultModels.map((model) => (
            <Form.Check
              key={model}
              type="checkbox"
              label={model.toUpperCase()}
              checked={models.includes(model)}
              onChange={() => handleToggleTag(model)}
              disabled={loading}
            />
          ))}
        </Form.Group>

        {loading && <ProgressBar animated now={100} className="mb-3" />}

        <div className="d-flex justify-content-end mt-4">
          <Button variant="secondary" onClick={handleCancel} className="me-2">
            Reset
          </Button>
          <Button
            variant="primary"
            type="submit"
            disabled={loading || !canSubmit}
          >
            Upload
          </Button>
        </div>
      </Form>

      <Toast
        show={showToast}
        onClose={() => setShowToast(false)}
        delay={3000}
        autohide
        style={{
          position: "absolute",
          top: 20,
          right: 20,
          backgroundColor: "#343a40", // Maintain previous toast color for visibility
          color: "white",
        }}
      >
        <Toast.Body>{mess}</Toast.Body>
      </Toast>
    </Container>
  );
};

export default NewUploadForm;

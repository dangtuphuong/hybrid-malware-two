/* eslint-disable react/prop-types */
/* eslint-disable react-hooks/exhaustive-deps */
import React, { useMemo, useState } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import { Card, Form, Container, Row, Col } from "react-bootstrap";

const generateColor = (index) => {
  const colors = [
    "#8884d8",
    "#82ca9d",
    "#ffc658",
    "#ff7300",
    "#ff0000",
    "#0000ff",
    "#00ff00",
    "#ff00ff",
    "#00ffff",
    "#ffff00",
    "#000000",
  ];
  return colors[index % colors.length];
};

const formatDate = (date) => {
  const d = new Date(date);
  const day = String(d.getDate()).padStart(2, "0");
  const month = String(d.getMonth() + 1).padStart(2, "0");
  const year = String(d.getFullYear()).slice(-2);
  return `${day}/${month}/${year}`;
};

const formatData = (rawData, metricType) => {
  return rawData.map((item) => {
    const classificationReport = JSON.parse(item.classification_report);
    return {
      created_at: item.created_at,
      ...Object.fromEntries(
        Object.entries(classificationReport).map(([key, value]) => [
          key,
          value[metricType],
        ])
      ),
    };
  });
};

const ClassificationLineChart = ({ data, label, loading }) => {
  const [metricType, setMetricType] = useState("accuracy");

  const formattedData = useMemo(
    () => formatData(data, metricType),
    [data?.length, metricType]
  );

  const uniqueClasses = Array.from(
    new Set(formattedData.flatMap(Object.keys))
  ).filter((key) => key !== "created_at");

  return (
    <Card className="p-3 mb-4 shadow-sm" style={{ padding: "20px" }}>
      <Card.Body>
        <Container>
          <Row>
            <Card.Title className="font-weight-bold">{label}</Card.Title>
            <Col xs="auto">
              <Form.Group controlId="metricTypeSelect">
                <Form.Label> Metric Type </Form.Label>
                <Form.Control
                  as="select"
                  value={metricType}
                  onChange={(event) => setMetricType(event.target.value)}
                >
                  <option value="accuracy">Accuracy</option>
                  <option value="precision">Precision</option>
                  <option value="recall">Recall</option>
                  <option value="f1-score">F1 Score</option>
                </Form.Control>
              </Form.Group>
            </Col>
          </Row>
        </Container>
        {loading ? (
          <p>Loading...</p>
        ) : (
          <ResponsiveContainer width="100%" height={400}>
            <LineChart
              margin={{ top: 20, right: 30, bottom: 5 }}
              data={formattedData}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="created_at" tickFormatter={formatDate} />
              <YAxis />
              <Tooltip />
              <Legend />
              {uniqueClasses.map((className, index) => (
                <Line
                  key={className}
                  type="monotone"
                  dataKey={className}
                  stroke={generateColor(index)}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        )}
      </Card.Body>
    </Card>
  );
};

export default ClassificationLineChart;

import unittest
from unittest.mock import patch, MagicMock
from flask import json
from app import app


class AuthTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    @patch("app.connect_to_db")
    def test_authenticate_user_success(self, mock_connect):
        mock_connection = MagicMock()
        mock_connect.return_value = mock_connection
        mock_cursor = MagicMock()
        mock_connection.cursor.return_value = mock_cursor

        # Simulate a successful user fetch
        mock_cursor.fetchone.return_value = {
            "id": 1,
            "email": "admin@malware.two",
            "password": "123",
        }

        response = self.app.post(
            "/api/authenticate",
            json={"email": "admin@malware.two", "password": "123"},
        )

        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertEqual(data["message"], "Authentication successful")
        self.assertEqual(data["user"]["email"], "admin@malware.two")

    @patch("app.connect_to_db")
    def test_authenticate_user_invalid_credentials(self, mock_connect):
        mock_connection = MagicMock()
        mock_connect.return_value = mock_connection
        mock_cursor = MagicMock()
        mock_connection.cursor.return_value = mock_cursor

        # Simulate no user found
        mock_cursor.fetchone.return_value = None

        response = self.app.post(
            "/api/authenticate",
            json={"email": "wrong@example.com", "password": "wrongpassword"},
        )

        self.assertEqual(response.status_code, 401)
        data = json.loads(response.data)
        self.assertEqual(data["error"], "Invalid email or password")

    @patch("app.connect_to_db")
    def test_authenticate_user_missing_email(self, mock_connect):
        response = self.app.post("/api/authenticate", json={"password": "123"})

        self.assertEqual(response.status_code, 400)
        data = json.loads(response.data)
        self.assertEqual(data["error"], "Missing email or password")

    @patch("app.connect_to_db")
    def test_authenticate_user_missing_password(self, mock_connect):
        response = self.app.post(
            "/api/authenticate", json={"email": "admin@malware.two"}
        )

        self.assertEqual(response.status_code, 400)
        data = json.loads(response.data)
        self.assertEqual(data["error"], "Missing email or password")

    @patch("app.connect_to_db")
    def test_authenticate_user_db_connection_error(self, mock_connect):
        mock_connect.return_value = None

        response = self.app.post(
            "/api/authenticate",
            json={"email": "admin@malware.two", "password": "123"},
        )

        self.assertEqual(response.status_code, 500)
        data = json.loads(response.data)
        self.assertEqual(data["error"], "Unable to connect to the database")


if __name__ == "__main__":
    unittest.main()

import unittest
from unittest.mock import patch
from flask import json
from io import BytesIO
from app import app


class PredictTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    @patch("app.predict_from_model")
    def test_predict_success(self, mock_predict_from_model):
        # Mock the return value for predict_from_model
        mock_predict_from_model.return_value = {
            "predictions": [1, 0, 1, 0],
            "confidence": [0.95, 0.10, 0.88, 0.20],
        }

        # Create a mock file
        data = {
            "file": (BytesIO(b"mock file content"), "test.csv"),
            "model_id": "123",
            "key_column": "id",
        }

        response = self.app.post("/api/predict", data=data)

        self.assertEqual(response.status_code, 200)
        response_data = json.loads(response.data)
        self.assertIn("predictions", response_data)
        self.assertEqual(response_data["predictions"], [1, 0, 1, 0])
        self.assertEqual(response_data["confidence"], [0.95, 0.10, 0.88, 0.20])

    @patch("app.predict_from_model")
    def test_predict_file_not_found(self, mock_predict_from_model):
        # Simulate a FileNotFoundError
        mock_predict_from_model.side_effect = FileNotFoundError("File not found")

        data = {"file": (BytesIO(b"mock file content"), "test.csv"), "model_id": "123"}

        response = self.app.post("/api/predict", data=data)

        self.assertEqual(response.status_code, 404)
        response_data = json.loads(response.data)
        self.assertIn("File not found", response_data["error"])

    @patch("app.predict_from_model")
    def test_predict_value_error(self, mock_predict_from_model):
        # Simulate a ValueError
        mock_predict_from_model.side_effect = ValueError("Invalid model ID")

        data = {"file": (BytesIO(b"mock file content"), "test.csv"), "model_id": "123"}

        response = self.app.post("/api/predict", data=data)

        self.assertEqual(response.status_code, 400)
        response_data = json.loads(response.data)
        self.assertIn("Invalid model ID", response_data["error"])

    def test_predict_missing_file(self):
        data = {"model_id": "123"}

        response = self.app.post("/api/predict", data=data)

        self.assertEqual(response.status_code, 500)
        response_data = json.loads(response.data)
        self.assertIn(
            "An unexpected error occurred in predicting:", response_data["error"]
        )


if __name__ == "__main__":
    unittest.main()

import unittest
from unittest.mock import patch
from flask import json
from io import BytesIO
from app import app


class TrainTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    @patch("app.train_models")
    @patch("app.store_metrics")
    def test_train_success(self, mock_store_metrics, mock_train_models):
        mock_train_models.return_value = (
            {"malware_type": 50, "benign_type": 50},  # malware_distribution
            {"accuracy": 0.95},  # knn_metrics
            {"accuracy": 0.90},  # lgbm_metrics
            {"accuracy": 0.92},  # hybrid_metrics
            [1, 2, 3],  # model_ids
        )
        mock_store_metrics.return_value = 123  # mock report ID

        # Create a mock file
        data = {
            "file": (BytesIO(b"mock file content"), "test.csv"),
            "separator": ",",
            "features": "feature1,feature2",
            "target": "target",
            "name": "Test Report",
            "created_by": "Tester",
            "train_models_str": "KNN,LGBM,Hybrid",
        }

        response = self.app.post("/api/train", data=data)

        self.assertEqual(response.status_code, 200)
        response_data = json.loads(response.data)
        self.assertEqual(response_data["report_id"], 123)
        self.assertEqual(response_data["knn_metrics"]["accuracy"], 0.95)
        self.assertEqual(response_data["lgbm_metrics"]["accuracy"], 0.90)
        self.assertEqual(response_data["hybrid_metrics"]["accuracy"], 0.92)
        self.assertEqual(response_data["model_ids"], [1, 2, 3])

    @patch("app.train_models")
    @patch("app.store_metrics")
    def test_train_store_metrics_failure(self, mock_store_metrics, mock_train_models):
        mock_train_models.return_value = (
            {"malware_type": 50, "benign_type": 50},  # malware_distribution
            {"accuracy": 0.95},  # knn_metrics
            {"accuracy": 0.90},  # lgbm_metrics
            {"accuracy": 0.92},  # hybrid_metrics
            [1, 2, 3],  # model_ids
        )
        mock_store_metrics.side_effect = Exception("Database error")

        data = {
            "file": (BytesIO(b"mock file content"), "test.csv"),
            "separator": ",",
            "features": "feature1,feature2",
            "target": "target",
            "name": "Test Report",
            "created_by": "Tester",
            "train_models_str": "KNN,LGBM,Hybrid",
        }

        response = self.app.post("/api/train", data=data)

        self.assertEqual(response.status_code, 500)
        response_data = json.loads(response.data)
        self.assertIn("Failed to store metrics:", response_data["error"])

    def test_train_missing_file(self):
        data = {
            "separator": ",",
            "features": "feature1,feature2",
            "target": "target",
            "name": "Test Report",
            "created_by": "Tester",
            "train_models_str": "KNN,LGBM,Hybrid",
        }

        response = self.app.post("/api/train", data=data)

        self.assertEqual(response.status_code, 500)
        response_data = json.loads(response.data)
        self.assertIn(
            "An unexpected error occurred in training:", response_data["error"]
        )


if __name__ == "__main__":
    unittest.main()

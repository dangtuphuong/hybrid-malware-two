import mysql.connector
import json
from utils.connect_to_db import connect_to_db


def store_metrics(
    malware_distribution,
    knn_metrics,
    lgbm_metrics,
    hybrid_metrics,
    model_ids,
    name="System Testing",
    created_by="system",
):
    try:
        knn_model_id = model_ids.get("knn", None)
        lgbm_model_id = model_ids.get("lgbm", None)
        hybrid_model_id = model_ids.get("hybrid", None)

        # Convert malware distribution to JSON
        malware_distribution_json = malware_distribution.to_json()

        # Establish a connection to the database
        connection = connect_to_db()
        cursor = connection.cursor()

        # Insert model metrics into model_metrics table for each model
        insert_metrics_query = """
        INSERT INTO model_metrics (id, accuracy, `precision`, recall, f1, classification_report)
        VALUES (%s, %s, %s, %s, %s, %s)
        """

        # Insert metrics for LightGBM
        if lgbm_metrics:
            cursor.execute(
                insert_metrics_query,
                (
                    lgbm_model_id,
                    lgbm_metrics["accuracy"],
                    lgbm_metrics["precision"],
                    lgbm_metrics["recall"],
                    lgbm_metrics["f1"],
                    lgbm_metrics["classification_report"],
                ),
            )

        # Insert metrics for KNN
        if knn_metrics:
            cursor.execute(
                insert_metrics_query,
                (
                    knn_model_id,
                    knn_metrics["accuracy"],
                    knn_metrics["precision"],
                    knn_metrics["recall"],
                    knn_metrics["f1"],
                    knn_metrics["classification_report"],
                ),
            )

        # Insert metrics for Hybrid
        if hybrid_metrics:
            cursor.execute(
                insert_metrics_query,
                (
                    hybrid_model_id,
                    hybrid_metrics["accuracy"],
                    hybrid_metrics["precision"],
                    hybrid_metrics["recall"],
                    hybrid_metrics["f1"],
                    hybrid_metrics["classification_report"],
                ),
            )

        # Create a report entry in the report table
        insert_report_query = """
        INSERT INTO report (name, knn_model_id, lgbm_model_id, hybrid_model_id, malware_distribution, created_by)
        VALUES (%s, %s, %s, %s, %s, %s)
        """
        cursor.execute(
            insert_report_query,
            (
                name,
                knn_model_id,
                lgbm_model_id,
                hybrid_model_id,
                malware_distribution_json,
                created_by,
            ),
        )

        # Get the ID of the newly created report
        report_id = cursor.lastrowid

        # Commit the changes
        connection.commit()

        # Return the report ID
        return report_id

    except mysql.connector.Error as err:
        print(f"Error Storing data: {err}")
    finally:
        cursor.close()
        connection.close()


def store_chain(chain_name, type):
    try:
        # Establish a connection to the database
        connection = connect_to_db()
        cursor = connection.cursor()

        # Create a chain entry in the chain table
        insert_chain_query = """
        INSERT INTO chain (name, type)
        VALUES (%s, %s)
        """
        cursor.execute(
            insert_chain_query,
            (chain_name, type),
        )

        # Get the ID of the newly created chain
        chain_id = cursor.lastrowid

        # Commit the changes
        connection.commit()

        # Return the report ID
        return chain_id

    except mysql.connector.Error as err:
        print(f"Error Storing chain data: {err}")
    finally:
        cursor.close()
        connection.close()


def store_chain_model_metrics(chain_id, new_model_id, created_at=None):
    try:
        # Establish a connection to the database
        connection = connect_to_db()
        cursor = connection.cursor()

        # Prepare the SQL query and parameters
        if created_at:
            insert_query = """
                INSERT INTO chain_model_metrics (chain_id, model_metrics_id, created_at)
                VALUES (%s, %s, %s)
            """
            parameters = (chain_id, new_model_id, created_at)
        else:
            insert_query = """
                INSERT INTO chain_model_metrics (chain_id, model_metrics_id)
                VALUES (%s, %s)
            """
            parameters = (chain_id, new_model_id)

        # Execute the insert query
        cursor.execute(insert_query, parameters)

        # Commit the changes
        connection.commit()

    except mysql.connector.Error as err:
        print(f"Error Storing chain_model_metrics data: {err}")
    finally:
        cursor.close()
        connection.close()

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv
import mysql.connector
from mysql.connector import Error

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)
CORS(app)

# MySQL connection configuration
db_config = {
    'host': os.getenv('DB_HOST'),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASS'),
}

# Function to connect to MySQL


def connect_to_db():
    try:
        connection = mysql.connector.connect(**db_config)
        if connection.is_connected():
            return connection
    except Error as e:
        print(f"Error connecting to MySQL: {e}")
        return None


@app.route('/api/authenticate', methods=['POST'])
def authenticate_user():
    data = request.json
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    connection = connect_to_db()
    if not connection:
        return jsonify({"error": "Unable to connect to the database"}), 500

    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute(
            "SELECT * FROM users WHERE email = %s AND password = %s", (email, password))
        user = cursor.fetchone()

        if user:
            return jsonify({"message": "Authentication successful", "user": user}), 200
        else:
            return jsonify({"error": "Invalid email or password"}), 401
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@app.route('/api/register', methods=['POST'])
def register_user():
    data = request.json
    name = data.get('name')
    email = data.get('email')
    password = data.get('password')
    role = data.get('role')

    if not name or not email or not password or not role:
        return jsonify({"error": "Missing name, email, password, or role"}), 400

    if role not in [0, 1]:
        return jsonify({"error": "Role must be either 0 or 1"}), 400

    connection = connect_to_db()
    if not connection:
        return jsonify({"error": "Unable to connect to the database"}), 500

    try:
        cursor = connection.cursor()

        # Insert user into the database
        sql = "INSERT INTO users (name, email, password, role) VALUES (%s, %s, %s, %s)"
        val = (name, email, password, role)
        cursor.execute(sql, val)

        connection.commit()

        # Fetch the newly registered user
        cursor.execute(
            "SELECT id, name, email, role FROM users WHERE email = %s", (email,))
        user_data = cursor.fetchone()
        if user_data:
            user = {
                "id": user_data[0],
                "name": user_data[1],
                "email": user_data[2],
                "role": user_data[3]
            }
            return jsonify({"message": "User registered successfully", "user": user}), 200
        else:
            return jsonify({"error": "User registration failed"}), 500

    except Error as e:
        return jsonify({"error": str(e)}), 500

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


if __name__ == '__main__':
    app.run()

import joblib
from flask import Flask, request, jsonify
from flask_cors import CORS
from mysql.connector import Error
from controllers.train import train_models
from controllers.predict import predict_from_model
from controllers.chain import chain_models
from models.user import auth_user, reg_user
from models.report import get_reports, store_metrics, get_all_reports, get_report
from models.chain import (
    get_chains,
    store_chain,
    store_chain_model_metrics,
    get_latest_chain_model_metrics,
    get_model_metrics_by_chain,
)


app = Flask(__name__)
CORS(app)


@app.route("/api/authenticate", methods=["POST"])
def authenticate_user():
    data = request.json
    email = data.get("email")
    password = data.get("password")

    if not email or not password:
        return jsonify({"error": "Missing email or password"}), 400

    return auth_user(email, password)


@app.route("/api/register", methods=["POST"])
def register_user():
    data = request.json
    name = data.get("name")
    email = data.get("email")
    password = data.get("password")
    role = data.get("role")

    if not name or not email or not password or not role:
        return jsonify({"error": "Missing name, email, password, or role"}), 400

    if role not in [0, 1]:
        return jsonify({"error": "Role must be either 0 or 1"}), 400

    return reg_user(name, email, password, role)


@app.route("/api/train", methods=["POST"])
def train():
    try:
        file = request.files["file"]
        separator = request.form["separator"]
        feature_columns = request.form["features"].split(separator)
        target_column = request.form["target"]
        name = request.form["name"]
        created_by = request.form["created_by"]
        train_models_str = request.form["train_models_str"]

        malware_distribution, knn_metrics, lgbm_metrics, hybrid_metrics, model_ids = (
            train_models(
                file, separator, feature_columns, target_column, train_models_str
            )
        )

        # Attempt to store metrics in the database
        report_id = None
        try:
            report_id = store_metrics(
                malware_distribution,
                knn_metrics,
                lgbm_metrics,
                hybrid_metrics,
                model_ids,
                name,
                created_by,
            )
        except Exception as store_error:
            return (
                jsonify({"error": "Failed to store metrics: " + str(store_error)}),
                500,
            )

        return (
            jsonify(
                {
                    "knn_metrics": knn_metrics,
                    "lgbm_metrics": lgbm_metrics,
                    "hybrid_metrics": hybrid_metrics,
                    "model_ids": model_ids,
                    "report_id": report_id,
                }
            ),
            200,
        )

    except Exception as e:
        return (
            jsonify({"error": "An unexpected error occurred in training: " + str(e)}),
            500,
        )


@app.route("/api/predict", methods=["POST"])
def predict():
    try:
        file = request.files["file"]
        model_id = request.form["model_id"]
        key_column = (
            request.form.get("key_column") or None
            if request.form.get("key_column") != ""
            else None
        )

        results = predict_from_model(file, model_id, key_column)

        return jsonify(results), 200

    except FileNotFoundError as e:
        return jsonify({"error": str(e)}), 404
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return (
            jsonify({"error": "An unexpected error occurred in predicting: " + str(e)}),
            500,
        )


@app.route("/api/report/<report_id>", methods=["GET"])
def get_report_by_id(report_id):
    return get_report(report_id)


@app.route("/api/reports", methods=["GET"])
def get_reports_list():
    return get_all_reports()


@app.route("/api/models", methods=["GET"])
def get_all_models():
    try:
        # Retrieve reports
        reports_response = get_reports()

        # Map Models
        models = []

        if reports_response:
            for report in reports_response:
                name = report.get("name")
                created_at = report.get("created_at")
                hybrid_model_id = report.get("hybrid_model_id")
                knn_model_id = report.get("knn_model_id")
                lgbm_model_id = report.get("lgbm_model_id")

                if hybrid_model_id:
                    models.append(
                        {
                            "id": hybrid_model_id,
                            "label": f"Hybrid // {hybrid_model_id}",
                            "value": hybrid_model_id,
                            "report": f"{name} - {created_at}",
                        }
                    )
                if knn_model_id:
                    models.append(
                        {
                            "id": knn_model_id,
                            "label": f"K-Nearest Neighors // {knn_model_id}",
                            "value": knn_model_id,
                            "report": f"{name} - {created_at}",
                        }
                    )
                if lgbm_model_id:
                    models.append(
                        {
                            "id": lgbm_model_id,
                            "label": f"LightGBM // {lgbm_model_id}",
                            "value": lgbm_model_id,
                            "report": f"{name} - {created_at}",
                        }
                    )

        # Load models from file
        try:
            saved_models = joblib.load("models_with_ids.pkl")
        except FileNotFoundError:
            saved_models = {}

        for model in models:
            saved_model = saved_models.get(model["id"])
            if saved_model:
                separator = saved_model.get("sep", ",")
                feature_columns = saved_model.get("feature_columns", [])
                model.update(
                    {
                        "separator": separator,
                        "feature_columns": separator.join(feature_columns),
                        "target_column": saved_model.get("target_column", None),
                        "type": saved_model.get("type"),
                    }
                )

        # Filter models that have matching IDs in saved models
        filtered_models = [
            model
            for model in models
            if any(id == model["id"] for id, details in saved_models.items())
        ]

        return jsonify({"items": filtered_models}), 200

    except Error as err:
        return jsonify({"error": str(err)}), 500


@app.route("/api/chain", methods=["POST"])
def chain():
    try:
        file = request.files["file"]
        model_id = request.form["model_id"]
        chain_name = request.form["chain_name"]
        report_name = request.form["report_name"]
        created_by = request.form["created_by"]
        chain_id = (
            request.form.get("chain_id")
            if request.form.get("chain_id") not in (None, "", "undefined", "null")
            else None
        )
        prev_created_at = (
            request.form.get("prev_created_at")
            if request.form.get("prev_created_at")
            not in (None, "", "undefined", "null")
            else None
        )

        malware_distribution, knn_metrics, lgbm_metrics, hybrid_metrics, model_ids = (
            chain_models(file, model_id)
        )

        # Attempt to store metrics in the database
        report_id = None
        try:
            report_id = store_metrics(
                malware_distribution,
                knn_metrics,
                lgbm_metrics,
                hybrid_metrics,
                model_ids,
                report_name,
                created_by,
            )
        except Exception as store_error:
            return (
                jsonify({"error": "Failed to store metrics: " + str(store_error)}),
                500,
            )

        # Attempt to store metrics in the database
        new_model_type = next(iter(model_ids.keys()), None)
        new_model_id = list(model_ids.values())[0] if model_ids else None

        if chain_id:
            try:
                store_chain_model_metrics(chain_id, new_model_id)
            except Exception as err:
                print(f"Failed to store chain_model_metric: {err}")

        else:
            try:
                chain_id = store_chain(chain_name, new_model_type)

                # Store prev model in chain
                try:
                    store_chain_model_metrics(chain_id, model_id, prev_created_at)
                except Exception as err:
                    print(f"Failed to store chain_model_metric: {err}")

                # Store new model in chain
                try:
                    store_chain_model_metrics(chain_id, new_model_id)
                except Exception as err:
                    print(f"Failed to store chain_model_metric: {err}")

            except Exception as store_chain_error:
                print(f"Failed to store chain_model_metric: {store_chain_error}")

        return (
            jsonify(
                {
                    "knn_metrics": knn_metrics,
                    "lgbm_metrics": lgbm_metrics,
                    "hybrid_metrics": hybrid_metrics,
                    "model_ids": model_ids,
                    "report_id": report_id,
                    "chain_id": chain_id,
                }
            ),
            200,
        )

    except Exception as e:
        return (
            jsonify({"error": "An unexpected error occurred in chaining: " + str(e)}),
            500,
        )


@app.route("/api/chain-models", methods=["GET"])
def get_chain_models():
    try:
        # Retrieve reports
        reports_response = get_reports()

        # Retrieve chains
        chains = get_latest_chain_model_metrics()

        # Map Models
        models = []

        if len(chains):
            for chain in chains:
                models.append(chain)

        if reports_response:
            for report in reports_response:
                name = report.get("name")
                created_at = report.get("created_at")
                hybrid_model_id = report.get("hybrid_model_id")
                knn_model_id = report.get("knn_model_id")
                lgbm_model_id = report.get("lgbm_model_id")

                if hybrid_model_id:
                    models.append(
                        {
                            "id": hybrid_model_id,
                            "label": f"Hybrid // {hybrid_model_id}",
                            "value": hybrid_model_id,
                            "report": f"Report: {name} - {created_at}",
                        }
                    )
                if knn_model_id:
                    models.append(
                        {
                            "id": knn_model_id,
                            "label": f"K-Nearest Neighors // {knn_model_id}",
                            "value": knn_model_id,
                            "report": f"Report: {name} - {created_at}",
                        }
                    )
                if lgbm_model_id:
                    models.append(
                        {
                            "id": lgbm_model_id,
                            "label": f"LightGBM // {lgbm_model_id}",
                            "value": lgbm_model_id,
                            "report": f"Report: {name} - {created_at}",
                        }
                    )

        # Load models from file
        try:
            saved_models = joblib.load("models_with_ids.pkl")
        except FileNotFoundError:
            saved_models = {}

        for model in models:
            saved_model = saved_models.get(model["id"])
            if saved_model:
                separator = saved_model.get("sep", ",")
                feature_columns = saved_model.get("feature_columns", [])
                model.update(
                    {
                        "separator": separator,
                        "feature_columns": separator.join(feature_columns),
                        "target_column": saved_model.get("target_column", None),
                        "type": saved_model.get("type"),
                        "created_at": saved_model.get("created_at", None),
                    }
                )

        # Filter models that have matching IDs in saved models
        filtered_models = [
            model
            for model in models
            if any(id == model["id"] for id, details in saved_models.items())
        ]

        return jsonify({"items": filtered_models}), 200

    except Error as err:
        return jsonify({"error": str(err)}), 500


@app.route("/api/chains", methods=["GET"])
def get_all_chains():
    return get_chains()


@app.route("/api/chain/<chain_id>", methods=["GET"])
def get_chain_by_id(chain_id):
    try:
        data = get_model_metrics_by_chain(chain_id)

        return jsonify(data), 200

    except Error as err:
        return jsonify({"error": str(err)}), 500


if __name__ == "__main__":
    app.run()

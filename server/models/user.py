from mysql.connector import Error
from utils.connect_to_db import connect_to_db
from flask import jsonify


def auth_user(email, password):
    try:
        connection = connect_to_db()
    except Error as e:
        return jsonify({"error": "Unable to connect to the database"}), 500

    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute(
            "SELECT * FROM users WHERE email = %s AND password = %s", (email, password)
        )
        user = cursor.fetchone()

        if user:
            return jsonify({"message": "Authentication successful", "user": user}), 200
        else:
            return jsonify({"error": "Invalid email or password"}), 401
    except Error as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


def reg_user(name, email, password, role):
    try:
        connection = connect_to_db()
    except Error as e:
        return jsonify({"error": "Unable to connect to the database"}), 500

    try:
        cursor = connection.cursor()

        # Insert user into the database
        sql = "INSERT INTO users (name, email, password, role) VALUES (%s, %s, %s, %s)"
        val = (name, email, password, role)
        cursor.execute(sql, val)

        connection.commit()

        # Fetch the newly registered user
        cursor.execute(
            "SELECT id, name, email, role FROM users WHERE email = %s", (email,)
        )
        user_data = cursor.fetchone()
        if user_data:
            user = {
                "id": user_data[0],
                "name": user_data[1],
                "email": user_data[2],
                "role": user_data[3],
            }
            return (
                jsonify({"message": "User registered successfully", "user": user}),
                200,
            )
        else:
            return jsonify({"error": "User registration failed"}), 500

    except Error as e:
        return jsonify({"error": str(e)}), 500

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

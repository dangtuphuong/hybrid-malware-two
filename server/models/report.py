import mysql.connector
from utils.connect_to_db import connect_to_db
from flask import jsonify
import json


def get_reports():
    try:
        connection = connect_to_db()
        cursor = connection.cursor()

        # Fetch all reports
        reports_query = "SELECT * FROM report"
        cursor.execute(reports_query)
        reports = cursor.fetchall()

        # Get column names
        column_names = [desc[0] for desc in cursor.description]

        # Prepare the response
        reports_response = []
        for report in reports:
            reports_response.append(dict(zip(column_names, report)))

        return reports_response

    except mysql.connector.Error as err:
        print(f"Error: {err}")
    finally:
        # Clean up and close the connection
        if cursor:
            cursor.close()
        if connection:
            connection.close()


def store_metrics(
    malware_distribution,
    knn_metrics,
    lgbm_metrics,
    hybrid_metrics,
    model_ids,
    name="System Testing",
    created_by="system",
):
    try:
        knn_model_id = model_ids.get("knn", None)
        lgbm_model_id = model_ids.get("lgbm", None)
        hybrid_model_id = model_ids.get("hybrid", None)

        # Convert malware distribution to JSON
        malware_distribution_json = malware_distribution.to_json()

        # Establish a connection to the database
        connection = connect_to_db()
        cursor = connection.cursor()

        # Insert model metrics into model_metrics table for each model
        insert_metrics_query = """
        INSERT INTO model_metrics (id, accuracy, `precision`, recall, f1, classification_report)
        VALUES (%s, %s, %s, %s, %s, %s)
        """

        # Insert metrics for LightGBM
        if lgbm_metrics:
            cursor.execute(
                insert_metrics_query,
                (
                    lgbm_model_id,
                    lgbm_metrics["accuracy"],
                    lgbm_metrics["precision"],
                    lgbm_metrics["recall"],
                    lgbm_metrics["f1"],
                    lgbm_metrics["classification_report"],
                ),
            )

        # Insert metrics for KNN
        if knn_metrics:
            cursor.execute(
                insert_metrics_query,
                (
                    knn_model_id,
                    knn_metrics["accuracy"],
                    knn_metrics["precision"],
                    knn_metrics["recall"],
                    knn_metrics["f1"],
                    knn_metrics["classification_report"],
                ),
            )

        # Insert metrics for Hybrid
        if hybrid_metrics:
            cursor.execute(
                insert_metrics_query,
                (
                    hybrid_model_id,
                    hybrid_metrics["accuracy"],
                    hybrid_metrics["precision"],
                    hybrid_metrics["recall"],
                    hybrid_metrics["f1"],
                    hybrid_metrics["classification_report"],
                ),
            )

        # Create a report entry in the report table
        insert_report_query = """
        INSERT INTO report (name, knn_model_id, lgbm_model_id, hybrid_model_id, malware_distribution, created_by)
        VALUES (%s, %s, %s, %s, %s, %s)
        """
        cursor.execute(
            insert_report_query,
            (
                name,
                knn_model_id,
                lgbm_model_id,
                hybrid_model_id,
                malware_distribution_json,
                created_by,
            ),
        )

        # Get the ID of the newly created report
        report_id = cursor.lastrowid

        # Commit the changes
        connection.commit()

        # Return the report ID
        return report_id

    except mysql.connector.Error as err:
        print(f"Error Storing data: {err}")
    finally:
        cursor.close()
        connection.close()


def get_all_reports():
    try:
        connection = connect_to_db()
        cursor = connection.cursor()

        # Fetch all reports
        reports_query = "SELECT * FROM report"
        cursor.execute(reports_query)
        reports = cursor.fetchall()

        # Get column names
        column_names = [desc[0] for desc in cursor.description]

        # Prepare the response
        reports_response = []
        for report in reports:
            reports_response.append(dict(zip(column_names, report)))

        return jsonify({"items": reports_response}), 200

    except mysql.connector.Error as err:
        return jsonify({"error": str(err)}), 500
    finally:
        cursor.close()
        connection.close()


def get_report(report_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()

        # Fetch the report by ID, including additional details
        report_query = """
        SELECT name, created_at, created_by, knn_model_id, lgbm_model_id, hybrid_model_id, malware_distribution
        FROM report
        WHERE id = %s
        """
        cursor.execute(report_query, (report_id,))
        report = cursor.fetchone()

        if report is None:
            return jsonify({"error": "Report not found"}), 404

        (
            name,
            created_at,
            created_by,
            knn_model_id,
            lgbm_model_id,
            hybrid_model_id,
            malware_distribution,
        ) = report

        # Prepare the response
        metrics_response = {}
        model_ids = [knn_model_id, lgbm_model_id, hybrid_model_id]
        model_names = [
            "Hybrid" if hybrid_model_id else None,
            "K-Nearest Neighors" if knn_model_id else None,
            "LightGBM" if lgbm_model_id else None,
        ]

        # Filter out None model IDs
        valid_model_ids = [model_id for model_id in model_ids if model_id is not None]
        valid_model_names = [
            model_name for model_name in model_names if model_name is not None
        ]

        # Fetch metrics for each model
        model_metrics_query = """
        SELECT accuracy, `precision`, recall, f1, classification_report
        FROM model_metrics
        WHERE id IN (%s, %s, %s)
        """
        cursor.execute(
            model_metrics_query, (knn_model_id, lgbm_model_id, hybrid_model_id)
        )
        metrics = cursor.fetchall()

        for i, model_id in enumerate(valid_model_ids):
            if i < len(metrics) and metrics[i]:
                metrics_response[valid_model_names[i]] = {
                    "id": model_id,
                    "accuracy": metrics[i][0],
                    "precision": metrics[i][1],
                    "recall": metrics[i][2],
                    "f1": metrics[i][3],
                    "classification_report": json.loads(metrics[i][4]),
                }

        return (
            jsonify(
                {
                    "report": {
                        "report_id": report_id,
                        "name": name,
                        "created_at": created_at,
                        "created_by": created_by,
                        "malware_distribution": json.loads(malware_distribution),
                    },
                    "models": metrics_response,
                }
            ),
            200,
        )

    except mysql.connector.Error as err:
        return jsonify({"error": str(err)}), 500
    finally:
        cursor.close()
        connection.close()

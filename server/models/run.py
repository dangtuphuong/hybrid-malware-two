import sys
import joblib
from models.train import train_models
from models.predict import predict_from_model
from utils.store_to_db import store_metrics


def main():
    if len(sys.argv) < 2:
        print("Usage: python run.py [train|predict|print]")
        sys.exit(1)

    action = sys.argv[1]

    if action == 'train':
        # Get user input for the dataset path
        file_path = input("Please enter the path to the dataset: ")

        # Get user input for the column separator
        separator = input("Please enter the column separator: ")

        # Get user input for feature columns
        feature_input = input(
            f"Please enter the feature columns separated by '{separator}': ")
        feature_columns = [feature.strip()
                           for feature in feature_input.split(separator)]

        # Get user input for target column
        target_column = input("Please enter the target column name: ").strip()

        # Call the train_models function
        malware_distribution, et_metrics, knn_metrics, hybrid_metrics, model_ids = train_models(
            file_path, separator, feature_columns, target_column)

        # Attempt to store metrics in the database
        # try:
        #     store_metrics(malware_distribution, et_metrics,
        #                   knn_metrics, hybrid_metrics, model_ids)
        # except Exception as store_error:
        #     print({"error": "Failed to store metrics: " + str(store_error)})

        # Print the results
        print("ExtraTrees Metrics:", et_metrics)
        print("K-Nearest Neighbors Metrics:", knn_metrics)
        print("Hybrid Metrics:", hybrid_metrics)
        print("Model IDs:", model_ids)
    elif action == 'predict':
        # Get user input for the dataset path
        file_path = input("Please enter the path to the dataset: ")

        # Get user input for model_id
        model_id = input("Please enter model_id: ")

        # Call the train_models function
        results = predict_from_model(file_path, model_id)

        # Print the results
        print(results)
    elif action == 'print':
        # Load models from the file
        try:
            models = joblib.load('models_with_ids.pkl')
            print("Models stored in the file:")
            for modelid, model_info in models.items():
                print(f"{modelid}, {model_info}")
        except FileNotFoundError:
            print("The file 'models_with_ids.pkl' does not exist.")
    else:
        print("Invalid action")
        sys.exit(1)


if __name__ == "__main__":
    main()

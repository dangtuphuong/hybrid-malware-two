import joblib
import json
import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import ExtraTreesClassifier, VotingClassifier
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder
import uuid


def train_models(file, separator, feature_columns, target_column, train_models_str='knn,et,hybrid', cv_folds=3):
    sep = separator if separator else ','

    if isinstance(train_models_str, str):
        option_models = train_models_str.split(',')

    try:
        # Load dataset
        data = pd.read_csv(file, sep=sep)
    except FileNotFoundError:
        raise FileNotFoundError("Dataset file not found.")
    except pd.errors.EmptyDataError:
        raise ValueError("Dataset file is empty.")
    except Exception as e:
        raise ValueError(
            f"An error occurred while loading the dataset: {str(e)}")

    # Handle missing values
    data = data.ffill()

    if data.empty:
        raise ValueError(
            "No valid data available after handling missing values.")

    # Split the data into features and target
    X = data[feature_columns].values
    y = data[target_column].values

    # Calculate and display malware type distribution
    malware_distribution = data[target_column].value_counts()
    print(f"\n### Malware Type Distribution ###\n{malware_distribution}")

    # Check if the target variable contains categorical string labels
    label_encoder = None
    if y.dtype == 'object':
        label_encoder = LabelEncoder()
        y = label_encoder.fit_transform(y)

    # Split the data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.1, random_state=0)

    if label_encoder:
        y_test_decoded = label_encoder.inverse_transform(y_test)
    else:
        y_test_decoded = y_test

    knn_metrics = None
    et_metrics = None
    hybrid_metrics = None

    ### KNN Model ###
    if 'knn' in option_models or 'hybrid' in option_models:
        try:
            knn_model = KNeighborsClassifier(
                n_neighbors=5,
                weights='uniform',
                metric='euclidean'
            )
            knn_model.fit(X_train, y_train)

            knn_cv_scores = cross_val_score(
                knn_model, X_train, y_train, cv=cv_folds)
            knn_test_preds = knn_model.predict(X_test)

            knn_metrics = calculate_metrics(
                y_test_decoded, knn_test_preds, label_encoder)

            print("\n### KNN Validation Metrics ###")
            print(f"Cross-Validation Accuracy: {np.mean(knn_cv_scores)}")
            print(f"Test Accuracy: {knn_metrics['accuracy']}")
            print(f"Precision: {knn_metrics['precision']}")
            print(f"Recall: {knn_metrics['recall']}")
            print(f"F1 Score: {knn_metrics['f1']}")
            print(knn_metrics['classification_report'])

        except Exception as e:
            raise ValueError(f"Error training KNN model: {str(e)}")

    ### Extra Trees Model ###
    if 'et' in option_models or 'hybrid' in option_models:
        try:
            et_model = ExtraTreesClassifier(
                n_estimators=200,
                max_depth=20,
                min_samples_split=2,
                min_samples_leaf=1,
                random_state=0
            )
            et_model.fit(X_train, y_train)

            et_cv_scores = cross_val_score(
                et_model, X_train, y_train, cv=cv_folds)
            et_test_preds = et_model.predict(X_test)

            et_metrics = calculate_metrics(
                y_test_decoded, et_test_preds, label_encoder)

            print("\n### Extra Trees Validation Metrics ###")
            print(
                f"Cross-Validation Accuracy: {np.mean(et_cv_scores)}")
            print(f"Test Accuracy: {et_metrics['accuracy']}")
            print(f"Precision: {et_metrics['precision']}")
            print(f"Recall: {et_metrics['recall']}")
            print(f"F1 Score: {et_metrics['f1']}")
            print(et_metrics['classification_report'])

        except Exception as e:
            raise ValueError(f"Error training Extra Trees model: {str(e)}")

    ### Hybrid Model ###
    if 'hybrid' in option_models:
        try:
            models = []
            if knn_metrics:
                models.append(('knn', knn_model))
            if et_metrics:
                models.append(('et', et_model))

            if models:
                voting_model = VotingClassifier(
                    estimators=models, voting='hard')
                voting_model.fit(X_train, y_train)

                hybrid_cv_scores = cross_val_score(
                    voting_model, X_train, y_train, cv=cv_folds)
                voting_test_preds = voting_model.predict(X_test)

                hybrid_metrics = calculate_metrics(
                    y_test_decoded, voting_test_preds, label_encoder)

                print("\n### Hybrid Model (KNN + Extra Trees) ###")
                print(
                    f"Cross-Validation Accuracy: {np.mean(hybrid_cv_scores)}")
                print(f"Test Accuracy: {hybrid_metrics['accuracy']}")
                print(f"Precision: {hybrid_metrics['precision']}")
                print(f"Recall: {hybrid_metrics['recall']}")
                print(f"F1 Score: {hybrid_metrics['f1']}")
                print(hybrid_metrics['classification_report'])

        except Exception as e:
            raise ValueError(f"Error training Hybrid model: {str(e)}")

    # Load existing models, if the file exists
    try:
        existing_models = joblib.load('models_with_ids.pkl')
    except FileNotFoundError:
        existing_models = {}

    # Define new models with unique IDs
    model_ids = {}
    if knn_metrics:
        model_ids['knn'] = str(uuid.uuid4())
        existing_models[model_ids['knn']] = {
            'model': knn_model,
            'label': 'K-Nearest Neighbors',
            'label_encoder': label_encoder,
            'feature_columns': feature_columns,
            'separator': sep
        }

    if et_metrics:
        model_ids['et'] = str(uuid.uuid4())
        existing_models[model_ids['et']] = {
            'model': et_model,
            'label': 'Extra Trees',
            'label_encoder': label_encoder,
            'feature_columns': feature_columns,
            'separator': sep
        }

    if hybrid_metrics:
        model_ids['hybrid'] = str(uuid.uuid4())
        existing_models[model_ids['hybrid']] = {
            'model': voting_model,
            'label': 'Hybrid',
            'label_encoder': label_encoder,
            'feature_columns': feature_columns,
            'separator': sep
        }

    # Save the models with unique IDs back to the file
    joblib.dump(existing_models, 'models_with_ids.pkl')

    return malware_distribution, knn_metrics, et_metrics, hybrid_metrics, model_ids


def calculate_metrics(y_true, y_pred, label_encoder):
    if label_encoder:
        y_pred_decoded = label_encoder.inverse_transform(y_pred)
    else:
        y_pred_decoded = y_pred

    metrics = {
        'accuracy': accuracy_score(y_true, y_pred_decoded),
        'precision': precision_score(y_true, y_pred_decoded, average='macro', zero_division=1),
        'recall': recall_score(y_true, y_pred_decoded, average='macro', zero_division=1),
        'f1': f1_score(y_true, y_pred_decoded, average='macro', zero_division=1),
        'classification_report': json.dumps(
            classification_report(y_true, y_pred_decoded,
                                  zero_division=1, output_dict=True),
            separators=(',', ':')
        )
    }
    return metrics
